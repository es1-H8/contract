name: Smart Contract CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install

      - name: Compile contracts
        run: npx hardhat compile

      - name: Run Hardhat Tests
        run: npx hardhat test

  security:
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install

      - name: Install Solhint
        run: npm install -g solhint

      - name: Run Solhint linting
        run: |
          echo "=== SOLHINT SECURITY ANALYSIS ===" | tee security-report.txt
          echo "Tool: Solhint" | tee -a security-report.txt
          echo "Timestamp: $(date)" | tee -a security-report.txt
          echo "" | tee -a security-report.txt
          
          echo "Analyzing contracts:" | tee -a security-report.txt
          ls -la contracts/*.sol | tee -a security-report.txt
          echo "" | tee -a security-report.txt
          
          npx solhint "contracts/**/*.sol" --formatter=unix | tee -a security-report.txt

      - name: Install Slither
        run: pip install slither-analyzer

      - name: Run Slither analysis
        run: |
          echo "=== SLITHER SECURITY ANALYSIS ===" | tee -a security-report.txt
          echo "Tool: Slither" | tee -a security-report.txt
          echo "Timestamp: $(date)" | tee -a security-report.txt
          echo "" | tee -a security-report.txt
          
          # Run Slither and save raw output
          slither . 2>&1 | tee raw-slither.txt || echo "Slither failed" | tee -a security-report.txt
          
          echo "" | tee -a security-report.txt
          echo "----------------------------------------" | tee -a security-report.txt
          echo "Formatted Slither Report" | tee -a security-report.txt
          echo "----------------------------------------" | tee -a security-report.txt
          
          # Group findings by contract
          awk '
            BEGIN { contract=""; }
            /contracts\/.*\.sol/ {
              match($0, /contracts\/[^:]+\.sol/)
              if (RLENGTH > 0) {
                thisContract = substr($0, RSTART+10, RLENGTH-10) # strip "contracts/"
                if (thisContract != contract) {
                  contract=thisContract
                  print "\n========================================"
                  print "Contract: " contract
                  print "========================================"
                }
              }
            }
            {print}
          ' raw-slither.txt | tee -a security-report.txt

      - name: Upload full security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.txt

  deploy:
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install

      - name: Discover contracts for deployment
        run: |
          echo "=== CONTRACTS DISCOVERED FOR DEPLOYMENT ==="
          ls -la contracts/
          echo ""
          ls contracts/*.sol | sed 's/contracts\//  - /'
          echo ""
          echo "Total contracts to deploy: $(ls contracts/*.sol | wc -l)"

      - name: Deploy to Sepolia Testnet
        env:
          INFURA_API_KEY: ${{ secrets.INFURA_API_KEY }}
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
        run: npx hardhat run scripts/deploy-all.js --network sepolia

      - name: Display deployment summary
        run: |
          echo "=== DEPLOYMENT SUMMARY ==="
          if [ -f deployment-summary.txt ]; then
            cat deployment-summary.txt
          else
            echo "No deployment summary found"
          fi

      - name: Upload deployment summary
        uses: actions/upload-artifact@v4
        with:
          name: deployment-summary
          path: deployment-summary.txt
