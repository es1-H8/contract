name: Smart Contract CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install

      - name: Compile contracts
        run: npx hardhat compile

      - name: Run Hardhat Tests
        run: npx hardhat test

  security:
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install

      - name: Verify dependencies for import resolution
        run: |
          echo "=== VERIFYING DEPENDENCIES FOR IMPORT RESOLUTION ==="
          echo "Checking if required packages are installed:"
          echo ""
          echo "OpenZeppelin contracts:"
          ls -la node_modules/@openzeppelin/contracts/ | head -5
          echo ""
          echo "Chainlink contracts:"
          ls -la node_modules/@chainlink/contracts/ | head -5
          echo ""
          echo "Pyth Network:"
          ls -la node_modules/@pythnetwork/ | head -5
          echo ""
          echo "ERC721A:"
          ls -la node_modules/erc721a/ | head -5
          echo ""
          echo "Dependencies verification complete"

      - name: Install Solhint
        run: npm install -g solhint

      - name: Run Solhint linting
        run: |
          echo "=== SOLHINT SECURITY ANALYSIS ===" | tee security-report.txt
          echo "Tool: Solhint" | tee -a security-report.txt
          echo "Timestamp: $(date)" | tee -a security-report.txt
          echo "" | tee -a security-report.txt
          
          echo "Analyzing contracts:" | tee -a security-report.txt
          ls -la contracts/*.sol | tee -a security-report.txt
          echo "" | tee -a security-report.txt
          
          # Process each contract individually to ensure complete analysis
          for contract in contracts/*.sol; do
            if [ -f "$contract" ]; then
              contract_name=$(basename "$contract")
              echo "========================================" | tee -a security-report.txt
              echo "Analyzing: $contract_name" | tee -a security-report.txt
              echo "========================================" | tee -a security-report.txt
              npx solhint "$contract" --formatter=unix | tee -a security-report.txt || echo "No issues found in $contract_name" | tee -a security-report.txt
              echo "" | tee -a security-report.txt
            fi
          done
          
          # Show analysis summary
          TOTAL_CONTRACTS=$(ls contracts/*.sol | wc -l)
          echo "=== SOLHINT ANALYSIS COMPLETE ===" | tee -a security-report.txt
          echo "Total contracts analyzed: $TOTAL_CONTRACTS" | tee -a security-report.txt
          echo "" | tee -a security-report.txt

      - name: Install Slither
        run: pip install slither-analyzer

      - name: Run Slither analysis
        run: |
          echo "=== SLITHER SECURITY ANALYSIS ===" | tee -a security-report.txt
          echo "Tool: Slither" | tee -a security-report.txt
          echo "Timestamp: $(date)" | tee -a security-report.txt
          echo "" | tee -a security-report.txt
          
          # Create remappings.txt for proper import resolution
          echo "Creating remappings.txt for import resolution..."
          echo "@openzeppelin/=node_modules/@openzeppelin/" > remappings.txt
          echo "@chainlink/=node_modules/@chainlink/" >> remappings.txt
          echo "@pythnetwork/=node_modules/@pythnetwork/" >> remappings.txt
          echo "erc721a/=node_modules/erc721a/" >> remappings.txt
          echo "@uniswap/=node_modules/@uniswap/" >> remappings.txt
          echo "zeppelin-solidity/=node_modules/zeppelin-solidity/" >> remappings.txt
          echo "openzeppelin-solidity/=node_modules/openzeppelin-solidity/" >> remappings.txt
          
          echo "Remappings created:"
          cat remappings.txt
          echo ""
          
          # Run Slither once on the entire project for proper import resolution
          echo "Running Slither analysis on entire project for import resolution..."
          slither . 2>&1 | tee -a raw-slither.txt || echo "Slither analysis completed" | tee -a raw-slither.txt
          
          echo "" | tee -a security-report.txt
          echo "----------------------------------------" | tee -a security-report.txt
          echo "Slither Analysis Results" | tee -a security-report.txt
          echo "----------------------------------------" | tee -a security-report.txt
          
          # Show which contracts were analyzed
          echo "Contracts analyzed:" | tee -a security-report.txt
          ls contracts/*.sol | sed 's/contracts\//  - /' | tee -a security-report.txt
          echo "" | tee -a security-report.txt
          
          echo "" | tee -a security-report.txt
          echo "----------------------------------------" | tee -a security-report.txt
          echo "Formatted Slither Report" | tee -a security-report.txt
          echo "----------------------------------------" | tee -a security-report.txt
          
          # Process and format the Slither output for better readability
          if [ -s raw-slither.txt ]; then
            echo "Slither analysis output:" | tee -a security-report.txt
            echo "" | tee -a security-report.txt
            
            # Format the output with better spacing between contracts
            cat raw-slither.txt | sed 's/^Contract: /\n\n========================================\nContract: /g' | sed 's/^INFO:Detectors:/\n\nINFO:Detectors:/g' | tee -a security-report.txt
          else
            echo "No Slither analysis output found" | tee -a security-report.txt
          fi

      - name: Upload full security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.txt

  deploy:
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install

      - name: Discover contracts for deployment
        run: |
          echo "=== CONTRACTS DISCOVERED FOR DEPLOYMENT ==="
          ls -la contracts/
          echo ""
          ls contracts/*.sol | sed 's/contracts\//  - /'
          echo ""
          echo "Total contracts to deploy: $(ls contracts/*.sol | wc -l)"

      - name: Deploy to Sepolia Testnet
        env:
          INFURA_API_KEY: ${{ secrets.INFURA_API_KEY }}
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
        run: npx hardhat run scripts/deploy-all.js --network sepolia

      - name: Display deployment summary
        run: |
          echo "=== DEPLOYMENT SUMMARY ==="
          if [ -f deployment-summary.txt ]; then
            cat deployment-summary.txt
          else
            echo "No deployment summary found"
          fi

      - name: Upload deployment summary
        uses: actions/upload-artifact@v4
        with:
          name: deployment-summary
          path: deployment-summary.txt
