name: Smart Contract CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install

      - name: Compile contracts
        run: npx hardhat compile

      - name: Run Hardhat Tests
        run: npx hardhat test

  security:
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install

      - name: Install Solhint
        run: npm install -g solhint

      - name: Run Solhint linting
        run: |
          echo "=== SOLHINT SECURITY ANALYSIS ===" | tee security-report.txt
          echo "Tool: Solhint" | tee -a security-report.txt
          echo "Timestamp: $(date)" | tee -a security-report.txt
          echo "" | tee -a security-report.txt
          
          # Get list of all contracts for analysis
          echo "Analyzing contracts:" | tee -a security-report.txt
          ls -la contracts/*.sol | tee -a security-report.txt
          echo "" | tee -a security-report.txt
          
          npx solhint "contracts/**/*.sol" --formatter=unix | tee -a security-report.txt

      - name: Install Slither
        run: |
          pip install slither-analyzer
          
          # Verify Slither installation
          echo "Verifying Slither installation..." | tee -a security-report.txt
          slither --version | tee -a security-report.txt || echo "Slither not found in PATH" | tee -a security-report.txt
          
          # Check current directory and contract status
          echo "" | tee -a security-report.txt
          echo "Current directory: $(pwd)" | tee -a security-report.txt
          echo "Contract files discovered:" | tee -a security-report.txt
          ls -la contracts/*.sol | tee -a security-report.txt
          echo "" | tee -a security-report.txt
          echo "Total contracts to analyze: $(ls contracts/*.sol | wc -l)" | tee -a security-report.txt
          echo "" | tee -a security-report.txt
          
          echo "=== SLITHER SECURITY ANALYSIS ===" | tee -a security-report.txt
          echo "Tool: Slither" | tee -a security-report.txt
          echo "Timestamp: $(date)" | tee -a security-report.txt
          echo "" | tee -a security-report.txt
          
          # Run Slither and format the output for better readability
          echo "Running Slither analysis..." | tee -a security-report.txt
          
          # Create a temporary file for raw Slither output
          slither . --print human-summary 2>&1 > slither_raw.txt || echo "Slither command failed, trying alternative approach..."
          
          # If first command failed, try with different options
          if [ ! -s slither_raw.txt ]; then
            echo "Trying alternative Slither command..." | tee -a security-report.txt
            slither . 2>&1 > slither_raw.txt || echo "Slither analysis failed"
          fi
          
          # Format the Slither output for better readability
          if [ -s slither_raw.txt ]; then
            echo "Formatting Slither results..." | tee -a security-report.txt
            
            # Extract contract names from the contracts directory
            echo "Contracts analyzed:" | tee -a security-report.txt
            for contract in contracts/*.sol; do
              if [ -f "$contract" ]; then
                contract_name=$(basename "$contract" .sol)
                echo "  - $contract_name" | tee -a security-report.txt
              fi
            done
            echo "" | tee -a security-report.txt
            
            # Process and format the Slither output
            echo "Processing vulnerability results..." | tee -a security-report.txt
            
            # Group vulnerabilities by contract and format them
            current_contract=""
            while IFS= read -r line; do
              # Check if this line indicates a new contract
              if [[ "$line" =~ ^[A-Za-z][A-Za-z0-9_]*:$ ]] || [[ "$line" =~ ^[A-Za-z][A-Za-z0-9_]*\s*\( ]]; then
                # Extract contract name (remove trailing colon or parentheses)
                contract_name=$(echo "$line" | sed 's/[:()].*$//' | xargs)
                
                # If this is a new contract, add separator
                if [ "$contract_name" != "$current_contract" ] && [ -n "$contract_name" ]; then
                  echo "" | tee -a security-report.txt
                  echo "----------------------------------------" | tee -a security-report.txt
                  echo "Contract: $contract_name" | tee -a security-report.txt
                  echo "----------------------------------------" | tee -a security-report.txt
                  current_contract="$contract_name"
                fi
              elif [[ "$line" =~ ^[[:space:]]*\[[A-Za-z]+\] ]] || [[ "$line" =~ ^[[:space:]]*[A-Za-z]+: ]]; then
                # This is a vulnerability line - add extra spacing for readability
                echo "" | tee -a security-report.txt
                echo "$line" | tee -a security-report.txt
              elif [[ "$line" =~ ^[[:space:]]*-> ]] || [[ "$line" =~ ^[[:space:]]*Reference: ]]; then
                # This is a reference or detail line - indent it
                echo "   $line" | tee -a security-report.txt
              elif [ -n "$line" ]; then
                # Other non-empty lines - preserve them
                echo "$line" | tee -a security-report.txt
              fi
            done < slither_raw.txt
            
            # Clean up temporary file
            rm -f slither_raw.txt
            
          else
            echo "No Slither output to process" | tee -a security-report.txt
          fi

      - name: Upload full security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.txt

  deploy:
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install

      - name: Discover contracts for deployment
        run: |
          echo "=== CONTRACTS DISCOVERED FOR DEPLOYMENT ==="
          echo "Contracts directory contents:"
          ls -la contracts/
          echo ""
          echo "Smart contracts found:"
          ls contracts/*.sol | sed 's/contracts\//  - /'
          echo ""
          echo "Total contracts to deploy: $(ls contracts/*.sol | wc -l)"

      - name: Deploy to Sepolia Testnet
        env:
          INFURA_API_KEY: ${{ secrets.INFURA_API_KEY }}
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
        run: npx hardhat run scripts/deploy-all.js --network sepolia

      - name: Display deployment summary
        run: |
          echo "=== DEPLOYMENT SUMMARY ==="
          if [ -f deployment-summary.txt ]; then
            cat deployment-summary.txt
          else
            echo "No deployment summary found"
          fi

      - name: Upload deployment summary
        uses: actions/upload-artifact@v4
        with:
          name: deployment-summary
          path: deployment-summary.txt 