name: Smart Contract CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install

      - name: Compile contracts
        run: npx hardhat compile

      - name: Run Hardhat Tests
        run: npx hardhat test

  security:
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install

      - name: Install Solhint
        run: npm install -g solhint

      - name: Run Solhint linting
        run: |
          echo "=== SOLHINT SECURITY ANALYSIS ===" | tee security-report.txt
          echo "Tool: Solhint" | tee -a security-report.txt
          echo "Timestamp: $(date)" | tee -a security-report.txt
          echo "" | tee -a security-report.txt
          
          # Get list of all contracts for analysis
          echo "Analyzing contracts:" | tee -a security-report.txt
          ls -la contracts/*.sol | tee -a security-report.txt
          echo "" | tee -a security-report.txt
          
          npx solhint "contracts/**/*.sol" --formatter=unix | tee -a security-report.txt

      - name: Install Slither
        run: |
          pip install slither-analyzer
          
          # Verify Slither installation
          echo "Verifying Slither installation..." | tee -a security-report.txt
          slither --version | tee -a security-report.txt || echo "Slither not found in PATH" | tee -a security-report.txt
          
          # Check current directory and contract status
          echo "" | tee -a security-report.txt
          echo "Current directory: $(pwd)" | tee -a security-report.txt
          echo "Contract files discovered:" | tee -a security-report.txt
          ls -la contracts/*.sol | tee -a security-report.txt
          echo "" | tee -a security-report.txt
          echo "Total contracts to analyze: $(ls contracts/*.sol | wc -l)" | tee -a security-report.txt
          echo "" | tee -a security-report.txt
          
          echo "=== SLITHER SECURITY ANALYSIS ===" | tee -a security-report.txt
          echo "Tool: Slither" | tee -a security-report.txt
          echo "Timestamp: $(date)" | tee -a security-report.txt
          echo "" | tee -a security-report.txt
          
          # Run Slither with simple formatting approach
          echo "Running Slither analysis..." | tee -a security-report.txt
          
          # List contracts being analyzed
          echo "Contracts analyzed:" | tee -a security-report.txt
          for contract in contracts/*.sol; do
            if [ -f "$contract" ]; then
              contract_name=$(basename "$contract" .sol)
              echo "  - $contract_name" | tee -a security-report.txt
            fi
          done
          echo "" | tee -a security-report.txt
          
          # Run Slither and format output directly
          echo "Vulnerability Analysis Results:" | tee -a security-report.txt
          echo "----------------------------------------" | tee -a security-report.txt
          
          # Run Slither and format the output in real-time
          slither . --print human-summary 2>&1 | while IFS= read -r line; do
            # Add contract separators for better readability
            if echo "$line" | grep -qE "^[A-Za-z][A-Za-z0-9_]*:"; then
              echo "" | tee -a security-report.txt
              echo "----------------------------------------" | tee -a security-report.txt
              echo "Contract: $(echo "$line" | sed 's/:.*$//')" | tee -a security-report.txt
              echo "----------------------------------------" | tee -a security-report.txt
              echo "$line" | tee -a security-report.txt
            elif echo "$line" | grep -qE "^[[:space:]]*\\[[A-Za-z]+\\]"; then
              # Vulnerability line - add spacing
              echo "" | tee -a security-report.txt
              echo "$line" | tee -a security-report.txt
            elif echo "$line" | grep -qE "^[[:space:]]*->"; then
              # Reference line - indent it
              echo "   $line" | tee -a security-report.txt
            else
              # Other lines - preserve as is
              echo "$line" | tee -a security-report.txt
            fi
          done || echo "Slither analysis completed or failed"

      - name: Upload full security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.txt

  deploy:
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install

      - name: Discover contracts for deployment
        run: |
          echo "=== CONTRACTS DISCOVERED FOR DEPLOYMENT ==="
          echo "Contracts directory contents:"
          ls -la contracts/
          echo ""
          echo "Smart contracts found:"
          ls contracts/*.sol | sed 's/contracts\//  - /'
          echo ""
          echo "Total contracts to deploy: $(ls contracts/*.sol | wc -l)"

      - name: Deploy to Sepolia Testnet
        env:
          INFURA_API_KEY: ${{ secrets.INFURA_API_KEY }}
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
        run: npx hardhat run scripts/deploy-all.js --network sepolia

      - name: Display deployment summary
        run: |
          echo "=== DEPLOYMENT SUMMARY ==="
          if [ -f deployment-summary.txt ]; then
            cat deployment-summary.txt
          else
            echo "No deployment summary found"
          fi

      - name: Upload deployment summary
        uses: actions/upload-artifact@v4
        with:
          name: deployment-summary
          path: deployment-summary.txt 